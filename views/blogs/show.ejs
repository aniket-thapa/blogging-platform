<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= blog.title %></title>
    <link rel="stylesheet" href="/public/css/tailwind.css" />
    <script
      src="https://kit.fontawesome.com/9ca9aa7819.js"
      crossorigin="anonymous"
    ></script>
    <style>
      .custom-scrollbar::-webkit-scrollbar {
        width: 12px;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb {
        background-color: #3b83f670;
        transition: background-color 0.3s ease;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background-color: #2563eb70;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb:active {
        background-color: #1d4fd870;
        box-shadow: inset 0 0 10px #0000004d;
      }

      .custom-scrollbar::-webkit-scrollbar-corner {
        background-color: transparent;
      }

      .custom-scrollbar::-webkit-scrollbar-track {
        background-color: transparent;
      }

      /* Custom Styling for Blog Content */
      .blog-content {
        margin-bottom: 28px;
      }
      .blog-content p {
        margin: 28px 0;
        line-height: 1.75;
      }
      .blog-content h1,
      .blog-content h2,
      .blog-content h3,
      .blog-content h4 {
        margin-top: 32px;
        font-weight: 700;
        line-height: 1.25;
      }
      .blog-content h1 {
        font-size: 2.5rem;
        margin-top: 40px;
        font-weight: 800;
      }
      .blog-content h2 {
        font-size: 1.8rem;
        margin-top: 40px;
      }
      .blog-content h3 {
        font-size: 1.5rem;
      }
      .blog-content blockquote {
        border-left: 4px solid #4a90e2;
        padding-left: 16px;
        margin: 16px 0;
        font-style: italic;
        color: #4a4a4a;
      }
      .blog-content ul {
        padding-left: 1.5rem;
        list-style-type: disc;
      }
      .blog-content ol {
        padding-left: 1.5rem;
        list-style-type: decimal;
      }
      .blog-content a {
        color: #1e40af;
        text-decoration: underline;
      }
      .blog-content a:hover {
        text-decoration: none;
        color: #2563eb;
      }
      /* Dark mode */
      :root {
        --code-bg: #f3f4f6;
        --code-text: #1a202c;
        --hr-border-color: rgb(209 213 219 / var(--tw-border-opacity, 1));
      }
      .dark {
        --code-bg: #2d3748;
        --code-text: #e2e8f0;
        --hr-border-color: rgb(55 65 81 / var(--tw-border-opacity, 1));
      }
      .blog-content hr {
        border-color: var(--hr-border-color);
      }
      .blog-content code {
        background-color: var(--code-bg);
        color: var(--code-text);
        padding: 2px 6px;
        border-radius: 4px;
      }

      .blog-content pre code {
        display: block;
        overflow-x: auto;
        padding-bottom: 12px;
      }

      .blog-content pre code::-webkit-scrollbar {
        height: 7px;
      }

      .blog-content pre code::-webkit-scrollbar-thumb {
        background: #a3a3a3;
        border-radius: 8px;
      }
      .blog-content pre code::-webkit-scrollbar-thumb:hover {
        cursor: pointer;
        background: #8d8d8d;
      }

      .blog-content pre {
        background-color: var(--code-bg);
        color: var(--code-text);
        padding: 16px;
        border-radius: 8px;
        overflow-x: auto;
        font-size: 1rem;
        line-height: 1.6;
        border: 1px solid rgba(128, 128, 128, 0.4);
      }

      /* Style the copy code button */

      .copy-btn {
        position: absolute;
        top: 8px;
        right: 8px;
        background: transparent;
        border: none;
        color: var(--code-text);
        cursor: pointer;
        font-size: 0.85rem;
        padding: 2px;
        opacity: 0.7;
        transition: opacity 0.2s;
      }

      .copy-btn:hover {
        opacity: 1;
      }

      .copy-btn .tooltip-code {
        visibility: hidden;
        background-color: #3e3e3e9e;
        color: #ffffff;
        text-align: center;
        border-radius: 4px;
        padding: 4px 8px;
        position: absolute;
        z-index: 1;
        top: -4px;
        right: 22px;
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 0.7rem;
      }

      .copy-btn:hover .tooltip-code {
        visibility: visible;
        opacity: 1;
      }

      /* Notification Bar */
      @keyframes slide-in {
        from {
          transform: translateY(10px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      .animate-slide-in {
        animation: slide-in 0.3s ease-out forwards;
      }

      @keyframes progress {
        from {
          width: 100%;
        }
        to {
          width: 0%;
        }
      }
    </style>
  </head>
  <body
    class="custom-scrollbar min-h-screen dark:bg-gray-900 dark:text-gray-100"
  >
    <%- include('../partials/navbar') %>

    <article>
      <div class="max-w-screen-md mx-auto px-4 py-8">
        <!-- Blog Title -->
        <article>
          <h1
            class="text-5xl font-extrabold text-gray-900 dark:text-gray-200 mb-4 tracking-tight"
          >
            <%= blog.title %>
          </h1>

          <!-- Edit and Delete Buttons -->
          <% if (user && blog.author._id.equals(user._id)) { %>

          <div class="m-4 flex gap-6 justify-end items-center">
            <a
              href="/blogs/<%= blog._id %>/edit"
              class="bg-blue-500 text-white py-2 px-4 rounded-xl hover:bg-blue-600 transition focus:ring-2 focus:ring-blue-700"
            >
              Edit
            </a>
            <button
              onclick="deleteBlog('<%= blog._id %>')"
              class="bg-red-500 text-white py-2 px-4 rounded-xl hover:bg-red-600 transition focus:ring-2 focus:ring-red-700"
            >
              Delete
            </button>
          </div>

          <% } %>

          <!-- Author and Date -->
          <div class="text-md text-gray-600 dark:text-gray-400 mb-6">
            <p>
              <i class="fa-regular fa-circle-user font-bold"></i>
              <span class="font-medium text-gray-800 dark:text-gray-300"
                ><%= blog.author.username %></span
              >
              <span class="px-1">•</span> <%= new Intl.DateTimeFormat('en-US', {
              year: 'numeric', month: 'long', day: 'numeric'
              }).format(blog.createdAt) %>
              <span class="px-1">•</span>
              <span id="reading-time"></span>
            </p>
          </div>

          <!-- Tags SHow Section -->
          <div class="my-4">
            <div class="flex flex-wrap gap-2">
              <% blog.tags.forEach(tag => { %>
              <a
                href="/blogs/tags/<%= tag %>"
                class="inline-block px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 text-sm rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700"
              >
                #<%= tag %>
              </a>
              <% }) %>
            </div>
          </div>

          <% if (user) { %>
          <!-- Bookmark Button -->
          <div class="my-3 flex items-center space-x-4">
            <button
              id="bookmark-button"
              class="<%= user && user.savedBlogs.includes(blog._id.toString()) ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-200' %> px-3 py-2 rounded-lg transition"
              data-blog-id="<%= blog._id %>"
              data-saved="<%= user && user.savedBlogs.includes(blog._id.toString()) %>"
              onclick="toggleSaveBlog(this)"
            >
              <i class="fa-solid fa-bookmark"></i>
              <!-- <i class="fa-regular fa-bookmark"></i> -->
            </button>
          </div>
          <% } %>

          <!-- Like, Comment and Share Row -->
          <hr class="border-gray-200 dark:border-gray-800 my-1" />
          <div
            class="my-2 text-gray-700 dark:text-gray-300 flex justify-between"
          >
            <div class="flex gap-4">
              <div
                class="group relative flex gap-2 content-center border border-gray-300 dark:border-gray-700 rounded-2xl px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <% if (user && blog.likes.includes(user._id)) { %>
                <button class="like-button2">
                  <i class="fa-regular fa-heart text-red-500"></i>
                </button>
                <!-- Tooltip -->
                <div
                  class="absolute font-medium z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
                >
                  Unlike
                </div>
                <% } else { %>
                <button class="like-button2">
                  <i class="fa-regular fa-heart"></i>
                </button>
                <!-- Tooltip -->
                <div
                  class="absolute font-medium z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
                >
                  Like
                </div>
                <% } %>
                <span class="likes-count"><%= blog.likes.length %></span>
              </div>

              <a href="#comments"
                ><div
                  class="group relative flex gap-2 content-center border border-gray-300 dark:border-gray-700 rounded-2xl px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-800"
                >
                  <span><i class="fa-regular fa-comment"></i></span
                  ><span><%= blog.comments.length %></span>

                  <!-- Tooltip -->
                  <div
                    class="absolute font-medium z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
                  >
                    Comments
                  </div>
                </div></a
              >
            </div>
            <div class="font-normal text-sm">
              <div
                onclick="navigator.clipboard.writeText(window.location.origin + '/blogs/<%= blog._id %>'); showNotification('Link Copied to Clipboard!', 2500);"
                class="group relative flex gap-2 content-center cursor-pointer border border-gray-300 dark:border-gray-700 rounded-2xl px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <span><i class="fa-solid fa-link text-gray-500"></i></span>
                <span>Share</span>
                <!-- Tooltip -->
                <div
                  class="absolute font-medium z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
                >
                  Copy Link
                </div>
              </div>
            </div>
          </div>
          <hr class="border-gray-200 dark:border-gray-800 my-1" />

          <!-- Blog Content -->

          <div
            id="blog-content"
            class="blog-content text-gray-900 dark:text-gray-300 text-lg space-y-6"
          >
            <%- blog.content %>
          </div>
        </article>

        <!-- Like, Comment and Share Row -->
        <hr class="border-gray-200 dark:border-gray-800 my-1" />
        <div class="my-2 text-gray-700 dark:text-gray-300 flex justify-between">
          <div class="flex gap-4">
            <div
              class="group relative flex gap-2 content-center border border-gray-300 dark:border-gray-700 rounded-2xl px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-800"
            >
              <% if (user && blog.likes.includes(user._id)) { %>
              <button class="like-button2">
                <i class="fa-regular fa-heart text-red-500"></i>
              </button>
              <!-- Tooltip -->
              <div
                class="absolute font-medium z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
              >
                Unlike
              </div>
              <% } else { %>
              <button class="like-button2">
                <i class="fa-regular fa-heart"></i>
              </button>
              <!-- Tooltip -->
              <div
                class="absolute font-medium z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
              >
                Like
              </div>
              <% } %>
              <span class="likes-count"><%= blog.likes.length %></span>
            </div>
            <a href="#comments"
              ><div
                class="group relative flex gap-2 content-center border border-gray-300 dark:border-gray-700 rounded-2xl px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <span><i class="fa-regular fa-comment"></i></span
                ><span><%= blog.comments.length %></span>
                <!-- Tooltip -->
                <div
                  class="absolute font-medium z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
                >
                  Comments
                </div>
              </div></a
            >
          </div>
          <div class="font-normal text-sm">
            <div
              onclick="navigator.clipboard.writeText(window.location.origin + '/blogs/<%= blog._id %>'); showNotification('Link Copied to Clipboard!', 2500); this.querySelector('.tooltip').classList.add('hidden');"
              class="relative group flex gap-2 content-center cursor-pointer border border-gray-300 dark:border-gray-700 rounded-2xl px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-800"
              onmouseover="this.querySelector('.tooltip').classList.remove('hidden')"
              onmouseout="this.querySelector('.tooltip').classList.add('hidden')"
            >
              <span><i class="fa-solid fa-link text-gray-500"></i></span>
              <span>Share</span>
              <!-- Tooltip -->
              <div
                class="absolute z-50 invisible group-hover:visible bottom-full left-1/2 -translate-x-1/2 mb-2 bg-gray-800 dark:bg-gray-100 text-white dark:text-gray-900 text-sm px-2 py-1 rounded-md whitespace-nowrap"
              >
                Copy Link
              </div>
            </div>
          </div>
        </div>
        <hr class="border-gray-200 dark:border-gray-800 mt-1 mb-4" />

        <!-- Comments Section -->
        <h3
          id="comments"
          class="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-4"
        >
          Comments
        </h3>
        <div class="space-y-4 mb-6">
          <% blog.comments.forEach(comment => { %>
          <div
            id="comment-<%= comment._id %>"
            class="border rounded-lg p-4 bg-gray-50 dark:bg-gray-800"
          >
            <p class="relative font-medium text-gray-800 dark:text-gray-300">
              <%= comment.author.username %>
              <span>(<%= comment.author.useremail %>)</span>

              <% if (user && user._id.toString() ===
              comment.author._id.toString()) { %>
              <button
                class="absolute right-0 text-gray-600 hover:text-red-900 transition-colors"
                onclick="deleteComment('<%= comment._id %>')"
              >
                <i class="fa-solid fa-trash-can"></i>
              </button>
              <% } %> <% if (user && blog.author._id.toString() ===
              user._id.toString()) { %>
              <button
                class="absolute right-0 text-gray-600 hover:text-red-900 transition-colors"
                onclick="deleteComment('<%= comment._id %>')"
              >
                <i class="fa-solid fa-trash-can"></i>
              </button>
              <% } %>
            </p>
            <p class="text-gray-700 dark:text-gray-400">
              <%= comment.content %>
            </p>
            <p class="text-sm text-gray-600 dark:text-gray-500">
              Commented on <%= comment.createdAt.toDateString() %>
            </p>
          </div>
          <% }) %>
        </div>

        <% if (user) { %>
        <!-- Add Comment Form -->
        <form
          id="commentForm"
          action="/blogs/<%= blog._id %>/comments"
          method="POST"
          class="space-y-4"
        >
          <textarea
            name="content"
            required
            class="w-full border-2 border-gray-300 dark:border-gray-600 rounded p-2 focus:outline-none focus:border-blue-400 dark:focus:border-blue-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200"
            placeholder="Write your comment..."
          ></textarea>
          <button
            type="submit"
            class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700 focus:ring transition"
          >
            Add Comment
          </button>
        </form>
        <% } %> <% if (!user) { %>
        <div class="text-gray-500 dark:text-gray-400 text-base">
          <p>
            <span>
              <a
                href="/login"
                class="font-semibold text-blue-500 hover:underline"
                >Login</a
              >
            </span>
            to Like & Comment
          </p>
        </div>
        <% } %>

        <!-- Back to All Blogs -->
        <a
          href="/blogs"
          class="block mt-8 text-center text-blue-500 dark:text-blue-400 hover:underline"
        >
          Back to All Blogs
        </a>
      </div>
    </article>

    <div
      id="notification-container"
      class="fixed top-4 right-4 flex flex-col gap-4"
    ></div>

    <button
      id="scroll-to-top"
      class="hidden bg-blue-500 fixed bottom-10 right-10 cursor-pointer z-100 rounded-full translate-x-1/2 w-8 h-8"
    >
      <i class="fa-solid fa-chevron-up text-center text-xl"></i>
    </button>

    <%- include('../partials/footer') %>

    <script>
      // Show Notifications
      function showNotification(message, duration = 2000) {
        const container = document.getElementById('notification-container');

        // Create notification element
        const notification = document.createElement('div');
        notification.className = `overflow-hidden relative max-w-xs w-full p-4 bg-white text-gray-900 rounded-lg shadow-md dark:bg-gray-800 dark:text-gray-100 transition-transform transform translate-y-4 opacity-0 animate-slide-in`;
        notification.innerHTML = `<div>${message}</div><div class="absolute bottom-0 left-0 h-1 bg-blue-600" style="animation: progress ${duration}ms linear forwards;"></div>`;

        // Append notification
        container.appendChild(notification);

        // Fade-in animation
        requestAnimationFrame(() => {
          notification.classList.remove('translate-y-4', 'opacity-0');
        });

        // Fade-out and remove notification after duration
        setTimeout(() => {
          notification.classList.add('translate-y-4', 'opacity-0');

          // Force removal after a short delay to ensure it doesn't persist
          setTimeout(() => {
            if (notification.parentNode) {
              notification.remove();
            }
          }, 300); // Match this with your fade-out transition duration
        }, duration);
      }

      // Scroll to Top Icon
      const scrollToTopButton = document.getElementById('scroll-to-top');

      // Show the button when the user scrolls to the bottom
      window.addEventListener('scroll', () => {
        if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
          scrollToTopButton.classList.remove('hidden');
        } else {
          scrollToTopButton.classList.add('hidden');
        }
      });
      scrollToTopButton.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });

      // Reading Time Count
      function stripHTML(html) {
        return html.replace(/<[^>]*>/g, '');
      }

      function countWords(text) {
        return text.trim().split(/\s+/).length;
      }

      function calculateReadingTime(content) {
        const plainText = stripHTML(content);
        const wordCount = countWords(plainText);
        const wordsPerMinute = 200;
        return Math.ceil(wordCount / wordsPerMinute);
      }

      document.addEventListener('DOMContentLoaded', () => {
        const blogContent = document.getElementById('blog-content').innerHTML;
        const readingTime = calculateReadingTime(blogContent);
        document.getElementById(
          'reading-time'
        ).textContent = `${readingTime} min read`;
      });

      // Delete a blog
      function deleteBlog(blogId) {
        const confirmed = confirm(
          'Are you sure to delete this blog? This cannot be undo?'
        );
        if (confirmed) {
          fetch(`/blogs/${blogId}?_method=DELETE`, {
            method: 'POST', // Use POST to simulate DELETE with _method
          })
            .then((response) => {
              if (response.ok) {
                window.location.href = '/blogs';
              } else {
                alert('Failed to delete the blog');
              }
            })
            .catch((error) => {
              console.error('Error:', error);
              alert('An error occurred');
            });
        }
      }

      // Add a new Comment
      const commentForm = document.getElementById('commentForm');
      if (commentForm) {
        commentForm.addEventListener('submit', async function (event) {
          event.preventDefault();

          const commentData = new URLSearchParams(new FormData(commentForm));
          console.log(commentData);
          try {
            const response = await fetch(commentForm.action, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
              },
              body: commentData.toString(),
            });

            const result = await response.json();

            if (response.ok) {
              commentForm.reset();
              showNotification(result.message, 2500);
              setTimeout(() => {
                location.reload();
              }, 2500);
            } else {
              throw new Error(result.message || 'Login failed');
            }
          } catch (error) {
            alert(error.message);
          }
        });
      }

      // Delete a Comment
      function deleteComment(commentId) {
        const confirmed = confirm(
          'Are you sure to delete this comment? This cannot be undo.'
        );
        if (confirmed) {
          fetch(`/blogs/comments/${commentId}?_method=DELETE`, {
            method: 'POST',
          })
            .then((response) => {
              if (response.ok) {
                commentForm.reset();
                showNotification('Comment deleted successfully', 2500);
                document.getElementById(`comment-${commentId}`).remove();
              } else {
                alert('Failed to delete the comment');
              }
            })
            .catch((error) => {
              console.error('Error:', error);
              alert('An error occurred');
            });
        }
      }

      // Likes show dynamically on the frontend with API call
      const user = `<%= user %>`;
      if (user) {
        const likeButtons = document.querySelectorAll('.like-button2');
        const likesCount = document.querySelectorAll('.likes-count');

        likeButtons.forEach((likeButton) => {
          likeButton.addEventListener('click', async () => {
            likeButtons.forEach((btn) => {
              const likeIcon = btn.querySelector('i');
              likeIcon.classList.toggle('text-red-500');
            });

            try {
              const response = await fetch('/blogs/<%= blog._id %>/like', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
              });

              if (response.ok) {
                const data = await response.json();
                likesCount.forEach((element) => {
                  element.innerHTML = `${data.likes}`;
                });
                likeButtons.forEach((btn) => {
                  const likeIcon = btn.querySelector('i');
                  if (data.message === 'Liked') {
                    likeIcon.classList.add('text-red-500');
                  } else if (data.message === 'Unliked') {
                    likeIcon.classList.remove('text-red-500');
                  }
                });
              } else {
                console.error('Failed to like the blog');
              }
            } catch (error) {
              console.error('Error:', error);
            }
          });
        });
      }

      // Copy Code Button
      document.addEventListener('DOMContentLoaded', function () {
        const codeBlocks = document.querySelectorAll('#blog-content pre code');

        codeBlocks.forEach((block) => {
          const copyButton = document.createElement('button'); // Create copy button
          copyButton.className = 'copy-btn';
          copyButton.innerHTML = `<i class="fa-regular fa-clone"></i><span class="tooltip-code">Copy</span>`;

          // Append the button to the pre element
          const pre = block.parentElement;
          pre.style.position = 'relative';
          pre.appendChild(copyButton);

          // Add copy functionality
          copyButton.addEventListener('click', () => {
            const text = block.innerText;
            navigator.clipboard.writeText(text).then(() => {
              copyButton.querySelector('.tooltip-code').textContent = 'Copied!';

              const copyIcon = copyButton.querySelector('i');

              copyIcon.classList.remove('fa-regular', 'fa-clone');
              copyIcon.classList.add('fa-solid', 'fa-check', 'text-green-500');

              setTimeout(() => {
                copyButton.querySelector('.tooltip-code').textContent = 'Copy';
                copyIcon.classList.add('fa-regular', 'fa-clone');
                copyIcon.classList.remove(
                  'fa-solid',
                  'fa-check',
                  'text-green-500'
                );
              }, 2000);
            });
          });
        });
      });

      // Add a View Count for the Blog
      const postId = '<%= blog._id %>';
      // Check if the cookie for this blog post already exists
      const hasViewed = document.cookie
        .split(';')
        .some((item) => item.trim().startsWith(`viewed_${postId}=`));

      // If the user hasn't viewed the blog before (no cookie for this post), start the 20-second timer
      if (!hasViewed) {
        window.onload = function () {
          setTimeout(function () {
            // Send an AJAX request to the server to track the view
            fetch(`/blogs/track-view/${postId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
            })
              .then((response) => {
                if (response.ok) {
                  // Set a cookie to indicate that the user has viewed this blog post
                  document.cookie = `viewed_${postId}=true; max-age=31536000; path=/`; // Cookie lasts for 1 year
                  console.log('View recorded successfully');
                }
              })
              .catch((error) => {
                console.error('Error recording view:', error);
              });
          }, 10000); // 10 seconds
        };
      }

      // Save or Bookmark Blog
      async function toggleSaveBlog(button) {
        const blogId = button.getAttribute('data-blog-id');
        const isSaved = button.getAttribute('data-saved') === 'true';

        try {
          const response = await fetch(
            `/blogs/${blogId}/${isSaved ? 'unsave' : 'save'}`,
            {
              method: 'POST',
            }
          );
          const result = await response.json();

          if (result.success) {
            // Toggle button state
            button.setAttribute('data-saved', !isSaved);
            button.classList.toggle('bg-blue-500');
            button.classList.toggle('text-white');
            button.classList.toggle('bg-gray-200');
            button.classList.toggle('dark:bg-gray-700');
            button.classList.toggle('text-gray-900');
            button.classList.toggle('dark:text-gray-200');

            // notification on save and unsave blog
            showNotification(
              isSaved
                ? 'Blog Unsaved Successfully!'
                : 'Blog Saved Successfully!',
              3000
            );
          } else {
            alert(result.message);
          }
        } catch (error) {
          alert('An error occurred while updating the blog save status.');
        }
      }
    </script>
  </body>
</html>
